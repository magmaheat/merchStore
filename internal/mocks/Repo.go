// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	repo "github.com/magmaheat/merchStore/internal/repo"
	mock "github.com/stretchr/testify/mock"
)

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: ctx, userId, item
func (_m *Repo) AddItem(ctx context.Context, userId int, item string) error {
	ret := _m.Called(ctx, userId, item)

	if len(ret) == 0 {
		panic("no return value specified for AddItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = rf(ctx, userId, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUserWithBalance provides a mock function with given fields: ctx, username, password
func (_m *Repo) CreateUserWithBalance(ctx context.Context, username string, password string) (int, error) {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserWithBalance")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (int, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBalance provides a mock function with given fields: ctx, userId
func (_m *Repo) GetBalance(ctx context.Context, userId int) (int, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItems provides a mock function with given fields: ctx, userId
func (_m *Repo) GetItems(ctx context.Context, userId int) ([]repo.Item, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetItems")
	}

	var r0 []repo.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]repo.Item, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []repo.Item); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repo.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNameUser provides a mock function with given fields: ctx, userId
func (_m *Repo) GetNameUser(ctx context.Context, userId int) (string, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetNameUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (string, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) string); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPriceItem provides a mock function with given fields: ctx, item
func (_m *Repo) GetPriceItem(ctx context.Context, item string) (int, error) {
	ret := _m.Called(ctx, item)

	if len(ret) == 0 {
		panic("no return value specified for GetPriceItem")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, item)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, item)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReceivedTransactions provides a mock function with given fields: ctx, userId
func (_m *Repo) GetReceivedTransactions(ctx context.Context, userId int) ([]repo.GetReceivedTransactionOutput, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetReceivedTransactions")
	}

	var r0 []repo.GetReceivedTransactionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]repo.GetReceivedTransactionOutput, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []repo.GetReceivedTransactionOutput); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repo.GetReceivedTransactionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSentTransactions provides a mock function with given fields: ctx, userId
func (_m *Repo) GetSentTransactions(ctx context.Context, userId int) ([]repo.GetSentTransactionOutput, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetSentTransactions")
	}

	var r0 []repo.GetSentTransactionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]repo.GetSentTransactionOutput, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []repo.GetSentTransactionOutput); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repo.GetSentTransactionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserIdWithPassword provides a mock function with given fields: ctx, username
func (_m *Repo) GetUserIdWithPassword(ctx context.Context, username string) (int, string, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserIdWithPassword")
	}

	var r0 int
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, string, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, username)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TransferCoins provides a mock function with given fields: ctx, fromUserId, toUserId, amount
func (_m *Repo) TransferCoins(ctx context.Context, fromUserId int, toUserId int, amount int) error {
	ret := _m.Called(ctx, fromUserId, toUserId, amount)

	if len(ret) == 0 {
		panic("no return value specified for TransferCoins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) error); ok {
		r0 = rf(ctx, fromUserId, toUserId, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBalance provides a mock function with given fields: ctx, userId, coins
func (_m *Repo) UpdateBalance(ctx context.Context, userId int, coins int) error {
	ret := _m.Called(ctx, userId, coins)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, userId, coins)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepo creates a new instance of Repo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repo {
	mock := &Repo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
